function [root, fx, ea, iter] = falsePosition(func, xl, xu, es, maxit, varargin)
%falsePosition finds the root of a function using false position method



% Check the number of inputs
if nargin < 3
    error('At least three input arguments are required.');
end

% Set the default values of es and maxit
if nargin < 4 || isempty(es)
    es = 0.0001;
end
if nargin < 5 || isempty(maxit)
    maxit = 200;
end

% Check the inputs
if xl >= xu
    error('Upper guess must be greater than lower guess.');
end

% Define the initial values of variables
iter = 0;
xr = xl;
ea = 100;

% Iterate until the stopping criterion is satisfied
while ea > es && iter < maxit
    % Calculate the function values at the lower and upper guesses
    funcl = func(xl, varargin{:});
    funcu = func(xu, varargin{:});
    
    % Calculate the root estimate using the false position formula
    xr_old = xr;
    xr = xu - ((funcu * (xl - xu)) / (funcl - funcu));
    fx = func(xr, varargin{:});
    
    % Calculate the approximate relative error
    if xr ~= 0
        ea = abs((xr - xr_old) / xr) * 100;
    end
    
    % Update the guess values for the next iteration
    if fx * funcl < 0
        xu = xr;
    elseif fx * funcu < 0
        xl = xr;
    else
        ea = 0;
    end
    
    % Increment the iteration counter
    iter = iter + 1;
end

% Set the root to the final estimate
root = xr;
end


% Create a test function to test falsePosition function. 
% It is best to choose something where you already know the answer so it is
% easy to check if the solution your algorithms gives is correct.
% Polynomials are a nice starting place, since we have equations for the roots
testFunc = @(x) x.^3; % the root for this is pretty clearly x=0

% now lets test the function, using default value for es
x_left = -1;
x_right = 1;
[root, fx, ea, iter] = falsePosition(testFunc, x_left, x_right)
