function [I] = Simpson(x, y)
% Numerical evaluation of integral by Simpson's 1/3 Rule
% Inputs
%   x = the vector of equally spaced independent variable
%   y = the vector of function values with respect to x
% Outputs:
%   I = the numerical integral calculated
% Check if inputs are of the same length
if length(x) ~= length(y)
    error('Input vectors x and y must have the same length');
end

% Check if x values are equally spaced
d=diff(x)
if ~isequallyspaced(x)
    error('Input vector x must be equally spaced');
end
c=d(1);
% Check if number of intervals is even, if not, use trapezoidal rule for last interval
if mod(length(x), 2) == 0
    warning('Number of intervals is even, trapezoidal rule will be used for the last interval');
end

% Perform Simpson's 1/3 rule
h = x(2) - x(1); % Step size
n = length(x);
I = y(1) + y(n); % First and last term of the integral
for i = 2:(n-1)
    if mod(i, 2) == 0 % Even terms
        I = I + 4*y(i);
    else % Odd terms
        I = I + 2*y(i);
    end
end
I = I * h/3;
end

function result = isequallyspaced(x)
% Check if input vector x is equally spaced
d = diff(x); % Differences between consecutive elements
tolerance = max(abs(d)) * 1e-6; % Set tolerance as a small fraction of the maximum difference
result = max(abs(d - d(1))) <= tolerance; % Compare differences to the first difference
end




%Two important quantities when studying fermentation are the carbon dioxide
% evolution rate (g/h) and the oxygen uptake rate (g/h). These are calculated
% from expiremental analysis of the inlet and exit gases of the fermentor, and the
% flow rates, temperature, and pressure of these gases
% Time of Fermentation (hours)
time = [140 141 142 143 144 145 146 147 148 149];
% Carbon Dioxide Evolution Rate (g/hour)
CO2evo = [15.72 15.53 15.19 16.56 16.21 17.39 17.36 17.42 17.60 17.75];
% Oxygen Uptake Rate (g/hour)
OxUp = [15.59 16.16 15.35 15.13 14.20 14.23 14.29 12.74 14.74 13.68];

% Using your function in part 1, and the data table below, calculate the total
% amount of carbon dioxide produced and oxygen consumed during fermentation.
% Compare to the value that the MATLAB function trapz() computes. You would
% expect the solutions it be similar but not identical

% using the matlab solution
total_CO2_trap = trapz(time, CO2evo)
total_Ox_trap = trapz(time, OxUp)

% using the matlab solution
total_CO2_simp = Simpson(time, CO2evo)
total_Ox_simp = Simpson(time, OxUp)
